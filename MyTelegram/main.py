import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

API_TOKEN = "7637477116:AAHCuE3f7lVXmw6uMSlObP5-PKLRITzoHw4"
ADMIN_ID = 8164159044
CHAT_LINK = "https://t.me/Almas24_Bot"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS_FILE = "products.json"

def load_products():
    if os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    else:
        # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        return {
            "100 üíé": 12,
            "200 üíé": 24,
            "–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–∫–∞—á–∫–∞üè∑": 35
        }

def save_products():
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
products = load_products()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
users = {}
# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –∫–ª—é—á ‚Äî ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ ID –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
referrals = {}
promocodes = {
    "ALMAZ": 10,  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞ (6 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã)
    "VIPFR": 100
}
pending_payments = {}
reviews = []
statistics = {
    "total_users": 0,
    "total_orders": 0,
    "start_date": datetime.now().strftime("%d.%m.%Y %H:%M")
}

class States(StatesGroup):
    choosing_product = State()
    entering_player_id = State()
    entering_promocode = State()
    waiting_payment = State()
    waiting_question = State()
    admin_add_product = State()
    admin_delete_product = State()
    admin_add_promo = State()

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def notify_admin(new_user: types.User, referral_info: str = ""):
    msg = (f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{new_user.username}\n"
           f"ID: {new_user.id}\n"
           f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    if referral_info:
        msg += f"\n–†–µ—Ñ–µ—Ä–∞–ª: {referral_info}"
    await bot.send_message(ADMIN_ID, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def process_referral(message: Message):
    text = message.text or ""
    parts = text.split(maxsplit=1)
    if len(parts) > 1:
        arg = parts[1].strip()
        if arg.isdigit():
            return int(arg)
    return None

# –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞)
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    if user_id == ADMIN_ID:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
                [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"), KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
                [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")]
            ],
            resize_keyboard=True
        )

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    try:
        await state.clear()
        user_id = message.from_user.id

        referrer_id = process_referral(message)
        referral_info = ""

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in users:
            users[user_id] = {
                "username": message.from_user.username,
                "reg_date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                "orders": 0,
                "referred_by": referrer_id,
            }
            statistics["total_users"] += 1
            if referrer_id and referrer_id != user_id:
                referrals.setdefault(referrer_id, []).append(user_id)
                referral_info = f"–ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}"
            await notify_admin(message.from_user, referral_info)

        kb = get_main_menu(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

    except Exception as e:
        logger.error(f"Start error: {e}")

# –†–µ—Ñ–µ—Ä–∞–ª—å–∫–∞ ‚Äî –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def referral_info(message: Message):
    user_id = message.from_user.id
    ref_link = f"{CHAT_LINK}?start={user_id}"
    count = len(referrals.get(user_id, []))
    await message.answer(
        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:\n/start {user_id}\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {ref_link}\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if await is_admin(message.from_user.id):
        kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üé´ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã")]
        ], resize_keyboard=True)
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: Message, state: FSMContext):
    if await is_admin(message.from_user.id):
        await state.set_state(States.admin_add_product)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ - –¶–µ–Ω–∞")

@dp.message(States.admin_add_product)
async def add_product_finish(message: Message, state: FSMContext):
    try:
        name, price = message.text.split(" - ")
        products[name.strip()] = int(price)
        save_products()
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω:\n{name.strip()} - {price} —Å–æ–º–æ–Ω–∏")
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - 100")
        logger.error(f"Add product error: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: Message, state: FSMContext):
    if await is_admin(message.from_user.id):
        if not products:
            return await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        product_list = "\n".join(products.keys())
        await state.set_state(States.admin_delete_product)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{product_list}")

@dp.message(States.admin_delete_product)
async def delete_product_finish(message: Message, state: FSMContext):
    try:
        product_name = message.text.strip()
        if product_name in products:
            del products[product_name]
            save_products()
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
        logger.error(f"Delete product error: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∞–¥–º–∏–Ω)
@dp.message(F.text == "üé´ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def add_promo_start(message: Message, state: FSMContext):
    if await is_admin(message.from_user.id):
        await state.set_state(States.admin_add_promo)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Å–∫–∏–¥–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö–û–î - –ü–†–û–¶–ï–ù–¢\n–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.")

@dp.message(States.admin_add_promo)
async def add_promo_finish(message: Message, state: FSMContext):
    try:
        code, discount = message.text.split(" - ")
        code = code.strip()
        if not (code.isalpha() and code.isupper() and len(code) == 6):
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞! –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.")
        promocodes[code] = int(discount)
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n{code} - {discount}%")
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\nPROMO - 15")
        logger.error(f"Add promo error: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if await is_admin(message.from_user.id):
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {statistics['total_users']}\n"
            f"üõí –ó–∞–∫–∞–∑–æ–≤: {statistics['total_orders']}\n"
            f"üìÖ –ó–∞–ø—É—â–µ–Ω: {statistics['start_date']}\n"
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await message.answer(stats_text)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤
@dp.message(F.text == "üìù –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: Message):
    if await is_admin(message.from_user.id):
        if reviews:
            reviews_text = "\n\n".join([f"üë§ {r['user']}: {r['text']}" for r in reviews])
            await message.answer(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n{reviews_text}")
        else:
            await message.answer("üò¢ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message, state: FSMContext):
    await state.set_state(States.waiting_question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:")

@dp.message(States.waiting_question)
async def save_review(message: Message, state: FSMContext):
    reviews.append({
        "user": message.from_user.username,
        "text": message.text,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await state.clear()

# –ü–æ–∫—É–ø–∫–∞ ‚Äì –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def show_products(message: Message, state: FSMContext):
    try:
        if not products:
            return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        product_keys = list(products.keys())
        buttons = []
        for i in range(0, len(product_keys), 2):
            row = product_keys[i:i+2]
            buttons.append([KeyboardButton(text=item) for item in row])
        # –ö–Ω–æ–ø–∫–∞ ¬´‚Ü© –ù–∞–∑–∞–¥¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")])
        
        kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await state.set_state(States.choosing_product)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    except Exception as e:
        logger.error(f"Show products error: {e}")

@dp.message(States.choosing_product)
async def choose_product(message: Message, state: FSMContext):
    try:
        product = message.text
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ¬´‚Ü© –ù–∞–∑–∞–¥¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if product == "‚Ü© –ù–∞–∑–∞–¥":
            await go_back_main_menu(message, state)
            return
        
        if product not in products:
            return await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await state.update_data(product=product)
        await state.set_state(States.entering_player_id)
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID (—Ü–∏—Ñ—Ä—ã, –æ—Ç 7 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    except Exception as e:
        logger.error(f"Choose product error: {e}")

@dp.message(States.entering_player_id)
async def handle_player_id(message: Message, state: FSMContext):
    try:
        if message.text == "‚Ü© –ù–∞–∑–∞–¥":
            await go_back_main_menu(message, state)
            return
        
        player_id = message.text.strip()
        if not player_id.isdigit() or not (7 <= len(player_id) <= 15):
            return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –æ—Ç 7 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        
        await state.update_data(player_id=player_id)
        await state.set_state(States.entering_promocode)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data="no_promocode")]
        ])
        await message.answer("üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç:", reply_markup=inline_kb)
    except Exception as e:
        logger.error(f"Player ID error: {e}")

@dp.message(States.entering_promocode)
async def handle_promocode(message: Message, state: FSMContext):
    try:
        if message.text == "‚Ü© –ù–∞–∑–∞–¥":
            await go_back_main_menu(message, state)
            return
        
        promo = message.text.strip()
        if promo.upper() == "–ù–ï–¢ –ü–†–û–ú–û–ö–û–î–ê":
            promo = "-"
        else:
            if not (promo.isalpha() and promo.isupper() and len(promo) == 6):
                return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞! –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞'.")
        
        data = await state.get_data()
        price = products[data["product"]]
        
        if promo != "-" and promo in promocodes:
            discount = promocodes[promo]
            price -= price * discount // 100
            await state.update_data(promocode=promo, discount=discount)
        else:
            promo = "-"
            await state.update_data(promocode=promo)
        
        await state.update_data(price=price)
        await state.set_state(States.waiting_payment)
        
        payment_text = (
            f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Å–æ–º–æ–Ω–∏\n"
            f"üìû –†–µ–∫–≤–∏–∑–∏—Ç—ã: +992 918 191451\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞\n\n"
            f"üéÆ –í–∞—à ID: {data.get('player_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        await message.answer(payment_text)
    except Exception as e:
        logger.error(f"Promocode error: {e}")

@dp.callback_query(F.data == "no_promocode")
async def handle_no_promocode(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete_reply_markup()
        data = await state.get_data()
        price = products[data["product"]]
        await state.update_data(promocode="-", price=price)
        await state.set_state(States.waiting_payment)
        payment_text = (
            f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Å–æ–º–æ–Ω–∏\n"
            f"üìû –†–µ–∫–≤–∏–∑–∏—Ç—ã: +992 918 191451\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞\n\n"
            f"üéÆ –í–∞—à ID: {data.get('player_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        await callback.message.answer(payment_text)
        await callback.answer()
    except Exception as e:
        logger.error(f"No promocode callback error: {e}")

@dp.message(States.waiting_payment, F.photo)
async def handle_payment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user = message.from_user
        pending_payments[user.id] = data
        statistics["total_orders"] += 1
        
        caption = (
            f"üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            f"üë§: @{user.username}\n"
            f"üÜî: {user.id}\n"
            f"üéÆ ID: {data.get('player_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {data['product']}\n"
            f"üíµ –°—É–º–º–∞: {data['price']} —Å–æ–º–æ–Ω–∏\n"
            f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {data.get('promocode', '–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"order_done_{user.id}")]
        ])
        
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=inline_kb)
        await message.answer("‚úÖ –ß–µ–∫ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await state.clear()
    except Exception as e:
        logger.error(f"Payment error: {e}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´‚Ü© –ù–∞–∑–∞–¥¬ª
@dp.message(F.text == "‚Ü© –ù–∞–∑–∞–¥")
async def go_back_main_menu(message: Message, state: FSMContext):
    await state.clear()
    kb = get_main_menu(message.from_user.id)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data and c.data.startswith("order_done_"))
async def handle_order_done(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º id –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ callback_data –≤–∏–¥–∞ "order_done_{user_id}"
        parts = callback.data.split("_")
        if len(parts) >= 3:
            buyer_id = int(parts[2])
        else:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞!", show_alert=True)
            return

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä", callback_data=f"order_received_{buyer_id}")]
        ])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        await bot.send_message(buyer_id, "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ", reply_markup=inline_kb)
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.", show_alert=True)
    except Exception as e:
        logger.error(f"Order done handler error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä" (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
@dp.callback_query(lambda c: c.data and c.data.startswith("order_received_"))
async def handle_order_received(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_")
        if len(parts) >= 3:
            buyer_id = int(parts[2])
        else:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞!", show_alert=True)
            return

        await bot.send_message(buyer_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!")
        await callback.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", show_alert=True)
    except Exception as e:
        logger.error(f"Order received handler error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è.", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())